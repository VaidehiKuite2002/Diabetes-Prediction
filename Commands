#import Librabry to the Model
import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score



<-------Data Collection and Analysis

PIMA diabetes dataset------->

#loading the dataset to run
diabetes_dataset = pd.read_csv('/content/diabetes.csv')
#printing the first 5 data from the given dataset
diabetes_dataset.head()
#number of Columns and Rows
diabetes_dataset.shape
diabetes_dataset.describe
diabetes_dataset['Outcome'].value_counts()
diabetes_dataset.groupby('Outcome').mean()

# separating the data and labels
X = diabetes_dataset.drop(columns = 'Outcome', axis=1)
Y = diabetes_dataset['Outcome']
print(X)
print(Y)

<-------------Data Standardization------------------------->

scaler = StandardScaler()
scaler.fit(X)
standardized_data = scaler.transform(X)
print(standardized_data)
X = standardized_data
Y = diabetes_dataset['Outcome']
print(X)
print(Y)


<------------------------Train Test Spilt---------------->

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2,stratify=Y,random_state = 2)
print(X.shape,X_train.shape,X_test.shape)


<--------------------------Training the Model---------------->

classifier = svm.SVC(kernel = 'linear')
#training the support vector Machine Classifer
classifier.fit(X_train,Y_train)

<---------------------------Model Evalution Accuracy Score------------------->

#accuracy score on the training data
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,Y_train)
print('Accuracy score of the training data :',training_data_accuracy)

#accuracy score on the test data
X_test_prediction = classifier.predict(X_test)
testing_data_accuracy = accuracy_score(X_test_prediction,Y_test)
print('Accuracy score of the testing data :',testing_data_accuracy)


<--------------------------------making a Predictive System------------------->

input_data = (4,110,92,0,0,37.6,0.191,30)
#changing(the inout_data into numoy array)
input_data_as_numpy_array = np.asarray(input_data)

#reshape the array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

#standarize the input data
std_data = scaler.transform(input_data_reshaped)

prediction = classifier.predict(std_data)
print(prediction)

if(prediction==0):
 print('Person is Non-Diabetic')

else:
 print('Person is Diabetic')
